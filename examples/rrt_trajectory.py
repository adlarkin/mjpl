"""
Example of the planning -> trajectory generation -> trajectory following pipeline.
"""

import argparse
import time
from pathlib import Path

import mujoco
import mujoco.viewer
import numpy as np

import mj_maniPlan.utils as utils
import mj_maniPlan.visualization as viz
from mj_maniPlan.collision_ruleset import CollisionRuleset
from mj_maniPlan.joint_group import JointGroup
from mj_maniPlan.rrt import RRT, RRTOptions
from mj_maniPlan.trajectory import TrajectoryLimits, generate_trajectory

_HERE = Path(__file__).parent
_PANDA_XML = _HERE / "models" / "franka_emika_panda" / "scene.xml"
_PANDA_OBSTACLES_XML = (
    _HERE / "models" / "franka_emika_panda" / "scene_with_obstacles.xml"
)
_PANDA_EE_SITE = "ee_site"


def parse_args() -> tuple[bool, bool, int | None]:
    parser = argparse.ArgumentParser(
        description="Compute and follow a trajectory from a plan generated by RRT."
    )
    parser.add_argument(
        "-no-viz",
        action="store_true",
        default=False,
        help="Do not visualize the trajectory in the MuJoCo viewer",
    )
    parser.add_argument(
        "-obs",
        "--obstacles",
        action="store_true",
        default=False,
        help="Use obstacles in the environment",
    )
    parser.add_argument(
        "-s",
        "--seed",
        type=int,
        default=-1,
        help="Seed for random sampling. Must be >= 0. If not set, a random seed will be used",
    )
    args = parser.parse_args()
    seed = args.seed
    if seed < 0:
        seed = None
    return args.no_viz, args.obstacles, seed


def main():
    no_viz, use_obstacles, seed = parse_args()

    if use_obstacles:
        model = mujoco.MjModel.from_xml_path(_PANDA_OBSTACLES_XML.as_posix())
    else:
        model = mujoco.MjModel.from_xml_path(_PANDA_XML.as_posix())
    data = mujoco.MjData(model)

    planning_joints = [
        model.joint("joint1").id,
        model.joint("joint2").id,
        model.joint("joint3").id,
        model.joint("joint4").id,
        model.joint("joint5").id,
        model.joint("joint6").id,
        model.joint("joint7").id,
    ]
    arm_jg = JointGroup(model, planning_joints)

    allowed_collisions = np.array(
        [
            [model.body("left_finger").id, model.body("right_finger").id],
        ]
    )
    cr = CollisionRuleset(model, allowed_collisions)

    # Use the 'home' keyframe position as q_init.
    q_init_world = model.keyframe("home").qpos

    # Generate valid goal configuration.
    rng = np.random.default_rng(seed=seed)
    q_goal = utils.random_valid_config(rng, arm_jg, data, cr)

    # Set up the planner.
    epsilon = 0.05
    planner_options = RRTOptions(
        jg=arm_jg,
        cr=cr,
        max_planning_time=10,
        epsilon=epsilon,
        shortcut_filler_epsilon=10 * epsilon,
        seed=seed,
        goal_biasing_probability=0.1,
    )
    planner = RRT(planner_options)

    print("Planning...")
    start = time.time()
    path = planner.plan(q_init_world, q_goal)
    if not path:
        print("Planning failed")
        return
    print(f"Planning took {(time.time() - start):.4f}s")

    print("Shortcutting...")
    start = time.time()
    shortcut_path = planner.shortcut(path, num_attempts=len(path))
    print(f"Shortcutting took {(time.time() - start):.4f}s")

    # These values are for demonstration purposes only.
    # In practice, consult your hardware spec sheet for this information.
    dof = len(planning_joints)
    tr_limits = TrajectoryLimits(
        jg=arm_jg,
        min_velocity=-np.ones(dof) * np.pi,
        max_velocity=np.ones(dof) * np.pi,
        min_acceleration=-np.ones(dof) * 0.5 * np.pi,
        max_acceleration=np.ones(dof) * 0.5 * np.pi,
        jerk=np.ones(len(planning_joints)),
    )

    print("Generating trajectory...")
    start = time.time()
    traj = generate_trajectory(shortcut_path, tr_limits, model.opt.timestep)
    print(f"Trajectory generation took {(time.time() - start):.4f}s")

    # Actuator indices in data.ctrl that correspond to the joints in
    # the trajectory (planning_joints).
    actuator_ids = [
        model.actuator("actuator1").id,
        model.actuator("actuator2").id,
        model.actuator("actuator3").id,
        model.actuator("actuator4").id,
        model.actuator("actuator5").id,
        model.actuator("actuator6").id,
        model.actuator("actuator7").id,
    ]

    # Follow the trajectory via position control, starting from the initial state.
    data.qpos = q_init_world
    mujoco.mj_forward(model, data)
    q_t = [arm_jg.qpos(data)]
    for q_ref in traj.configurations:
        data.ctrl[actuator_ids] = q_ref
        mujoco.mj_step(model, data)
        q_t.append(arm_jg.qpos(data))

    if not no_viz:
        with mujoco.viewer.launch_passive(
            model=model, data=data, show_left_ui=False, show_right_ui=False
        ) as viewer:
            # Update the viewer's orientation to capture the scene.
            viewer.cam.lookat = [0, 0, 0.35]
            viewer.cam.distance = 2.5
            viewer.cam.azimuth = 145
            viewer.cam.elevation = -25

            # Visualize the initial EE pose.
            data.qpos = q_init_world
            mujoco.mj_kinematics(model, data)
            pos, rot = utils.site_pose(_PANDA_EE_SITE, data)
            viz.add_frame(viewer.user_scn, pos, rot)

            # Visualize the target EE pose.
            arm_jg.fk(q_goal, data)
            pos, rot = utils.site_pose(_PANDA_EE_SITE, data)
            viz.add_frame(viewer.user_scn, pos, rot)

            # Visualize the trajectory. The trajectory is of high resolution,
            # so plotting every other timestep should be sufficient.
            for q_ref in traj.configurations[::2]:
                arm_jg.fk(q_ref, data)
                pos = data.site(_PANDA_EE_SITE).xpos
                viz.add_sphere(viewer.user_scn, pos, 0.004, [0.2, 0.6, 0.2, 0.2])

            # Replay the robot following the trajectory.
            for q_actual in q_t:
                start_time = time.time()
                if not viewer.is_running():
                    return
                arm_jg.fk(q_actual, data)
                viewer.sync()
                time_until_next_step = model.opt.timestep - (time.time() - start_time)
                if time_until_next_step > 0:
                    time.sleep(time_until_next_step)


if __name__ == "__main__":
    main()
